analyze_web_performance_task:
  description: >
    Analyze the performance of the website at "{website_url}" using the provided tools.
    Key areas to assess include:
    - Overall performance score.
    - Key performance metrics (e.g., FCP, LCP, TTI).
    - Opportunities for optimization and diagnostics.

    If detailed data is unavailable, provide a brief summary of the input and identify possible reasons for missing insights.
    NOTE: Ensure the report is clear, actionable, and always includes output.

  expected_output: >
    A structured performance report including:
    - The performance score (0–100).
    - Key metrics with their values.
    - Identified opportunities for improvement with explanations.
    - Diagnostics or issues encountered during the analysis.
    - Actionable suggestions to optimize web page performance.
    - Formatted as markdown (excluding code blocks or triple backticks) for readability.
  agent: pagePerformance_analyzer
  inputs:
    website_url: "{website_url}"
  

analyze_web_accessibility_task:
  description: >
    Evaluate the accessibility of the website at "{website_url}" using the provided tools.
    Focus on identifying:
    - Overall accessibility score.
    - Key accessibility metrics (e.g., contrast ratios, ARIA usage).
    - Opportunities for improvement and diagnostics.

    If comprehensive data is unavailable, generate a brief summary of the input and potential issues impacting the assessment.
    NOTE: Always provide a complete and actionable output.

  expected_output: >
    A structured accessibility report including:
    - The accessibility score (0–100).
    - Key metrics and their values (e.g., contrast issues, navigability).
    - Identified opportunities to improve accessibility.
    - Diagnostics or challenges encountered during analysis.
    - Suggestions to make the web page more inclusive and accessible.
    - Formatted as markdown (excluding code blocks or triple backticks) for readability.

  agent: pageAccessibility_analyzer
  inputs:
    website_url: "{website_url}"


analyze_web_best_practices_task:
  description: >
    Assess the compliance of "{website_url}" with web development best practices.
    Provide insights on:
    - Overall best-practices compliance score.
    - Key metrics (e.g., HTTPS usage, resource optimizations).
    - Opportunities for improvement and diagnostics.

    If full data is unavailable, create a brief summary of the input and outline potential reasons for missing insights.
    NOTE: Ensure the output is actionable and easy to understand.

  expected_output: >
    A best-practices compliance report including:
    - The compliance score (0–100).
    - Key metrics and their values (e.g., secure connection, resource handling).
    - Opportunities for improvement and potential best-practices violations.
    - Diagnostics or issues encountered during the analysis.
    - Suggestions for improving compliance with best practices.
    - Formatted as markdown (excluding code blocks or triple backticks) for readability.
  agent: pageBestPractices_analyzer
  inputs:
    website_url: "{website_url}"




analyze_SEO_task:
  description: >
    Evaluate the SEO performance of the website at "{website_url}" using the provided tools.
    Key areas to focus on:
    - Overall SEO score.
    - Key SEO metrics (e.g., metadata, structured data, mobile-friendliness).
    - Opportunities for optimization and diagnostics.

    If detailed data is unavailable, create a brief summary of the input and outline reasons for missing insights.
    NOTE: Always provide a clear and actionable report.

  expected_output: >
    An SEO performance report including:
    - The SEO score (0–100).
    - Key metrics with their values (e.g., title tags, alt text, structured data issues).
    - Opportunities for SEO improvement and compliance.
    - Diagnostics or challenges encountered during the analysis.
    - Suggestions to improve the SEO performance of the website.
    - Formatted as markdown (excluding code blocks or triple backticks) for readability.

  agent: pageSEO_analyzer
  inputs:
    website_url: "{website_url}"



analyze_html_task:
  description: >
    Extract the HTML of the website at "{website_url}" and perform a thorough analysis to identify potential issues or bugs as well as analyze the content for readability and relevance.
    The task must focus on:
    - Detecting problems such as broken or missing tags, improper nesting of elements, missing attributes (e.g., alt attributes for images), missing or duplicate meta tags, and inline styles or JavaScript that should be externalized.
    - Analyzing the content for:
      - Readability (e.g., Flesch Reading Ease score, sentence length, use of jargon).
      - Structure (e.g., proper use of headings, paragraphs, and lists).
      - Relevance (e.g., keyword density, match with meta descriptions).

    Your final answer MUST include:
    - A list of identified HTML issues with their line numbers or locations (if possible).
    - Suggestions to fix each issue.
    - Content analysis insights such as readability scores, structural observations, and keyword analysis.
    - Suggestions to improve readability, structure, and relevance.

  expected_output: >
    A report containing:
    - A summary of the analysis.
    - A detailed list of detected HTML issues with their descriptions and locations.
    - Recommendations for resolving each issue.
    - Insights on content readability, structure, and relevance, along with actionable recommendations.
    - Formatted as markdown (excluding code blocks or triple backticks) for readability.


  agent: html_content_analyzer


analyze_http_security_task:
  description: >
    Fetch and analyze the HTTP headers of the website at "{website_url}" to identify potential security risks.
    Key focus areas include:
    - Presence of critical headers such as `Strict-Transport-Security`, `Content-Security-Policy`, and `X-Frame-Options`.
    - Detection of insecure configurations or missing headers.
    - Analysis of header values to ensure adherence to security best practices.

    If headers cannot be fetched, provide a detailed explanation of the issue.
    NOTE: Always include clear, actionable recommendations in the final output.

  expected_output: >
    A security analysis report including:
    - A summary of the headers analyzed.
    - Detected issues with descriptions of their risks.
    - Suggestions to resolve the identified issues.
    - Additional recommendations to improve HTTP header security.
    - Formatted as markdown (excluding code blocks or triple backticks) for readability.

  agent: web_security_specialist
 


generate_kpi_json_task:
  description: >
    Extract KPIs from the reports generated by the agents analyzing the website at "{website_url}" (Performance, Accessibility, SEO, Security, HTML/Content, and Best Practices). 
    Focus on summarizing key metrics into a structured JSON format that includes:
    - `score`: The overall score for the domain (0-100).
    - `critical_issues`: Count of critical issues detected in the analysis.
    - `total_issues`: The total count of issues detected in the analysis.
    - 'data_unavailable': Boolean indicating whether data is available or not.

    If a domain lacks data or analysis, indicate this in the JSON with `"data_unavailable": true` for that section.

    Example JSON:
    
      "performance": 
        "score": 85,
        "critical_issues": 0,
        "total_issues": 5,
        "data_unavailable": false
      ,
      "accessibility": 
        "score": 90,
        "critical_issues": 0,
        "total_issues": 3,
        "data_unavailable": false
      ,
      "seo": 
        "score": 88,
        "critical_issues": 3,
        "total_issues": 4,
        "data_unavailable": false
      ,
      "security": 
        "score": 75,
        "critical_issues": 2,
        "total_issues": 6,
        "data_unavailable": false
      ,
      "html/content": 
        "score": 70,
        "critical_issues": 0,
        "total_issues": 8,
        "data_unavailable": false
      ,
      "best_practices": 
        "score": 92,
        "critical_issues": 1,
        "total_issues": 2,
        "data_unavailable": false
      
    **Important Requirements**:
    - The output must be a raw JSON object, without additional comments, backticks, or formatting syntax.
    - Ensure the JSON structure matches the provided example exactly.
    - The output should be ready for direct use in APIs, visualization tools, or dashboards.

  expected_output: >
    A clean, properly formatted JSON object summarizing the KPIs for the specified domains. The file must not include comments or additional formatting syntax. Do not include ```json  ``` in your output. Only output the syntax of the JSON object.
    The JSON must include `score`, `critical_issues`, `total_issues` and "data_unavailable" for each analyzed domain (Performance, Accessibility, SEO, Security, HTML/Content, and Best Practices).
    
  agent: kpi_extractor

reporting_task:
  description: >
    Consolidate insights from all agents into a comprehensive report.
    Expand each topic (Performance, Accessibility, Best Practices,SEO,Security,HTML) into detailed sections with full context and relevant information.
    Ensure the report is:
    - Clear and well-organized.
    - Comprehensive, covering all relevant findings.
    - Actionable, with specific recommendations for improvement.

    Use a structured format and ensure readability.

  expected_output: >
    A detailed and consolidated report including:
    - A separate section for each topic (Performance, Accessibility, Best Practices, SEO) with full context.
    - Each section should summarize key findings, scores, metrics, diagnostics, and actionable recommendations.
    - Formatted as markdown (excluding code blocks or triple backticks) for readability.
  agent: reporting_analyst

